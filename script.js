"use strict"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º

// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
const scoreDisplay = document.getElementById('score');
const ppcDisplay = document.getElementById('ppc');
const ppsDisplay = document.getElementById('pps');
const pizzaButton = document.getElementById('pizza-button');
const pizzaContainer = document.getElementById('pizza-container');
const interactiveArea = document.getElementById('interactive-area');
const upgradesList = document.getElementById('upgrades-list');
const resetButton = document.getElementById('reset-button');
const achievementsList = document.getElementById('achievements-list');
const achievementCountDisplay = document.getElementById('achievement-count');
const achievementToast = document.getElementById('achievement-toast');
const toastMessage = achievementToast.querySelector('.toast-message');
const userGreetingElement = document.getElementById('user-greeting');

// --- –ê—É–¥–∏–æ ---
const sounds = {
    click: document.getElementById('click-sound'),
    buy: document.getElementById('buy-sound'),
    achievement: document.getElementById('achievement-sound'),
    goldenPizza: document.getElementById('golden-pizza-sound')
};
let audioContextStarted = false;

// --- Telegram Web App Initialization ---
const tg = window.Telegram.WebApp;
let userColorScheme = 'light';
const CLOUD_STORAGE_KEY = 'pizzaClickerSave_tma'; // –ö–ª—é—á –¥–ª—è CloudStorage
const LOCAL_STORAGE_FALLBACK_KEY = 'pizzaClickerSave_fallback'; // –ö–ª—é—á –¥–ª—è LocalStorage (–∑–∞–ø–∞—Å–Ω–æ–π)

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
let score = 0;
let totalPizzasEarned = 0;
let totalClicks = 0;
let pizzasPerClick = 1;
let pizzasPerSecond = 0;
let scoreCountUp; // –≠–∫–∑–µ–º–ø–ª—è—Ä CountUp.js

// --- –î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏–π ---
let upgrades = [
    { id: 'strong_wrist', name: '–°–∏–ª—å–Ω–æ–µ –ó–∞–ø—è—Å—Ç—å–µ', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–∏—Ü—Ü –∑–∞ –∫–ª–∏–∫.', icon: 'üí™', baseCost: 15, costIncreaseFactor: 1.15, type: 'click', baseValue: 1, level: 0, tooltip: "–ë–æ–ª—å—à–µ –ø–∏—Ü—Ü—ã –∑–∞ –∫–∞–∂–¥—ã–π –≤–∞—à –∫–ª–∏–∫!" },
    { id: 'oven_mitts', name: '–ö—É—Ö–æ–Ω–Ω—ã–µ –†—É–∫–∞–≤–∏—Ü—ã', description: '–ë–æ–ª—å—à–µ –ø–∏—Ü—Ü –∑–∞ –∫–ª–∏–∫.', icon: 'üß§', baseCost: 100, costIncreaseFactor: 1.18, type: 'click', baseValue: 5, level: 0, tooltip: "–ö–ª–∏–∫–∞–π—Ç–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é." },
    { id: 'carbide_roller', name: '–ö–∞—Ä–±–∏–¥–æ–≤—ã–π –†–æ–ª–∏–∫', description: '–°–µ—Ä—å–µ–∑–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–∏—Ü—Ü –∑–∞ –∫–ª–∏–∫.', icon: 'üî™', baseCost: 2000, costIncreaseFactor: 1.20, type: 'click', baseValue: 50, level: 0, tooltip: "–í—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π —Ä–æ–ª–∏–∫ –¥–ª—è –ø–∏—Ü—Ü—ã." },
    { id: 'grandma', name: '–ë–∞–±—É—à–∫–∞', description: '–ü–µ—á–µ—Ç –ø–∏—Ü—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.', icon: 'üëµ', baseCost: 50, costIncreaseFactor: 1.20, type: 'auto', baseValue: 1, level: 0, tooltip: "–ö–ª–∞—Å—Å–∏–∫–∞. –ü–µ—á–µ—Ç —Å –ª—é–±–æ–≤—å—é." },
    { id: 'pizza_boy', name: '–î–æ—Å—Ç–∞–≤—â–∏–∫ –ü–∏—Ü—Ü—ã', description: '–ü—Ä–∏–Ω–æ—Å–∏—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–∏—Ü—Ü —Å–∞–º.', icon: 'üõµ', baseCost: 500, costIncreaseFactor: 1.22, type: 'auto', baseValue: 8, level: 0, tooltip: "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö –ø–∏—Ü—Ü." },
    { id: 'stone_oven', name: '–ö–∞–º–µ–Ω–Ω–∞—è –ü–µ—á—å', description: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ-–ø—Ä–∏–±—ã–ª—å.', icon: 'üî•', baseCost: 5000, costIncreaseFactor: 1.25, type: 'auto', baseValue: 50, level: 0, tooltip: "–ì–æ—Ä—è—á–∏–µ –ø–∏—Ü—Ü—ã, –ø—Ä—è–º–æ –∏–∑ –ø–µ—á–∏!" },
    { id: 'pizzeria', name: '–ü–∏—Ü—Ü–µ—Ä–∏—è', description: '–ù–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–∏—Ü—Ü—ã.', icon: 'üè¢', baseCost: 75000, costIncreaseFactor: 1.28, type: 'auto', baseValue: 400, level: 0, tooltip: "–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è." },
    { id: 'click_multiplier', name: '–î–≤–æ–π–Ω–æ–π –ö–ª–∏–∫', description: '–£–º–Ω–æ–∂–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞ x2.', icon: 'üñ±Ô∏è', baseCost: 10000, costIncreaseFactor: 2.5, type: 'click_multiplier', baseValue: 2, level: 0, maxLevel: 5, tooltip: "–ö–∞–∂–¥—ã–π –∫–ª–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞!" },
    { id: 'grandma_recipes', name: '–†–µ—Ü–µ–ø—Ç—ã –ë–∞–±—É—à–∫–∏', description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ë–∞–±—É—à–µ–∫.', icon: 'üìú', baseCost: 25000, costIncreaseFactor: 3, type: 'synergy', targetUpgradeId: 'grandma', multiplier: 2, level: 0, maxLevel: 3, tooltip: "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ç–≤–æ—Ä—è—Ç —á—É–¥–µ—Å–∞." },
];

// --- –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
let achievements = [
    { id: 'click_1', name: '–ü–µ—Ä–≤—ã–π –ö–ª–∏–∫', description: '–°–¥–µ–ª–∞—Ç—å 1 –∫–ª–∏–∫', icon: 'üëÜ', condition: () => totalClicks >= 1, unlocked: false },
    { id: 'click_100', name: '–°–æ—Ç—ã–π –ö–ª–∏–∫', description: '–°–¥–µ–ª–∞—Ç—å 100 –∫–ª–∏–∫–æ–≤', icon: 'üñ±Ô∏è', condition: () => totalClicks >= 100, unlocked: false },
    { id: 'click_1k', name: '–¢—ã—Å—è—á–∞ –ö–ª–∏–∫–æ–≤', description: '–°–¥–µ–ª–∞—Ç—å 1000 –∫–ª–∏–∫–æ–≤', icon: '‚å®Ô∏è', condition: () => totalClicks >= 1000, unlocked: false },
    { id: 'earn_100', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –ü–µ–∫–∞—Ä—å', description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100 –ø–∏—Ü—Ü', icon: 'üí∞', condition: () => totalPizzasEarned >= 100, unlocked: false },
    { id: 'earn_10k', name: '–ü–∏—Ü—Ü–∞-–ú–∞–≥–Ω–∞—Ç', description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10,000 –ø–∏—Ü—Ü', icon: 'ü§ë', condition: () => totalPizzasEarned >= 10000, unlocked: false },
    { id: 'earn_1m', name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 1,000,000 –ø–∏—Ü—Ü', icon: 'üëë', condition: () => totalPizzasEarned >= 1000000, unlocked: false },
    { id: 'buy_grandma', name: '–ü—Ä–∏–≤–µ—Ç, –ë–∞–±—É–ª—è!', description: '–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤—É—é –ë–∞–±—É—à–∫—É', icon: 'üëµ', condition: () => upgrades.find(u => u.id === 'grandma')?.level >= 1, unlocked: false },
    { id: 'buy_10_grandma', name: '–ê—Ä–º–∏—è –ë–∞–±—É—à–µ–∫', description: '–ö—É–ø–∏—Ç—å 10 –ë–∞–±—É—à–µ–∫', icon: 'üëµüëµ', condition: () => upgrades.find(u => u.id === 'grandma')?.level >= 10, unlocked: false },
    { id: 'buy_oven', name: '–ó–∞–∂–∏–≥–∞–µ–º!', description: '–ö—É–ø–∏—Ç—å –ö–∞–º–µ–Ω–Ω—É—é –ü–µ—á—å', icon: 'üî•', condition: () => upgrades.find(u => u.id === 'stone_oven')?.level >= 1, unlocked: false },
    { id: 'buy_synergy', name: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –†–µ—Ü–µ–ø—Ç', description: '–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–∏', icon: '‚ú®', condition: () => upgrades.some(u => u.type === 'synergy' && u.level > 0), unlocked: false },
];

// --- –ó–æ–ª–æ—Ç–∞—è –ü–∏—Ü—Ü–∞ ---
let goldenPizzaTimeout;
const GOLDEN_PIZZA_MIN_INTERVAL = 30 * 1000;
const GOLDEN_PIZZA_RANDOM_INTERVAL = 90 * 1000;
const GOLDEN_PIZZA_DURATION = 8 * 1000;

// --- –ò–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã (ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤) ---
let autoClickIntervalId;
let saveGameIntervalId;

// --- –§—É–Ω–∫—Ü–∏–∏ ---

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function setupTelegramIntegration() {
    if (!tg || !tg.initData) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tg –∏ initData
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram WebApp. –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ fallback.");
        if (userGreetingElement) userGreetingElement.textContent = "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞!";
        applyTheme({}); // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ç–µ–º—É
        return;
    }

    try {
        tg.ready();
        tg.expand();
        tg.enableClosingConfirmation();

        applyTheme(tg.themeParams);
        tg.onEvent('themeChanged', () => applyTheme(tg.themeParams));

        if (tg.initDataUnsafe?.user && userGreetingElement) {
            const user = tg.initDataUnsafe.user;
            userGreetingElement.textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name || user.username}!`;
        }
         console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:", tg);
    } catch (error) {
         console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:", error);
          if (userGreetingElement) userGreetingElement.textContent = "–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.";
          applyTheme({}); // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
function applyTheme(themeParams) {
    try {
        userColorScheme = tg?.colorScheme || 'light';
        const root = document.documentElement;
        root.style.setProperty('--tma-bg-color', themeParams.bg_color || '#ffffff');
        root.style.setProperty('--tma-text-color', themeParams.text_color || '#000000');
        root.style.setProperty('--tma-hint-color', themeParams.hint_color || '#707579');
        root.style.setProperty('--tma-link-color', themeParams.link_color || '#2481cc');
        root.style.setProperty('--tma-button-color', themeParams.button_color || '#2481cc');
        root.style.setProperty('--tma-button-text-color', themeParams.button_text_color || '#ffffff');
        root.style.setProperty('--tma-secondary-bg-color', themeParams.secondary_bg_color || '#f1f1f1');

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–∞ theme-color –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        let themeMeta = document.querySelector('meta[name="theme-color"]');
        if (!themeMeta) {
            themeMeta = document.createElement('meta');
            themeMeta.name = "theme-color";
            document.head.appendChild(themeMeta);
        }
        themeMeta.content = themeParams.bg_color || '#ffffff'; // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        console.log(`–¢–µ–º–∞ ${userColorScheme} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.`);

    } catch (error) {
         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã:", error);
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function playSound(soundId) {
    if (!audioContextStarted && typeof AudioContext !== 'undefined') {
        const audioCtx = new AudioContext();
        if (audioCtx.state === 'suspended') {
            audioCtx.resume().then(() => {
                console.log("AudioContext resumed!");
                audioContextStarted = true;
                playSoundInternal(soundId);
            }).catch(e => console.error("AudioContext resume failed:", e));
        } else {
             audioContextStarted = true;
        }
    }
    playSoundInternal(soundId);
}

function playSoundInternal(soundId) {
    const sound = sounds[soundId];
    if (sound && (audioContextStarted || !tg || !tg.initData)) { // –†–∞–∑—Ä–µ—à–∞–µ–º –∏–≥—Ä–∞—Ç—å –≤–Ω–µ –¢–ì —Å—Ä–∞–∑—É
        sound.currentTime = 0;
        sound.play().catch(error => console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ ${soundId}:`, error));
    } else if (!sound) {
        // console.warn(`–ó–≤—É–∫ —Å ID "${soundId}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
}

// Haptic Feedback
function triggerHapticFeedback(style = 'light') {
     if (tg?.HapticFeedback?.impactOccurred) {
          try {
            tg.HapticFeedback.impactOccurred(style);
          } catch (e) {
            console.warn("Haptic feedback failed:", style, e);
            // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (style !== 'light') {
                 try { tg.HapticFeedback.impactOccurred('light'); } catch (e2) {}
            }
          }
     }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
    num = Math.floor(num);
    if (Math.abs(num) < 1000) return num.toString();
    const suffixes = ['', 'K', 'M', 'B', 'T', 'Qa', 'Qi', 'Sx', 'Sp', 'Oc', 'No', 'Dc'];
    const i = Math.floor(Math.log10(Math.abs(num)) / 3);
    if (i >= suffixes.length) return num.toExponential(2);
    const scaled = num / Math.pow(1000, i);
    const formatted = scaled.toFixed(scaled < 10 ? 2 : scaled < 100 ? 1 : 0).replace(/\.0+$/, ''); // –£–±–∏—Ä–∞–µ–º .00 –∏ .0
    return formatted + suffixes[i];
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
function calculateCost(upgrade) {
    return Math.floor(upgrade.baseCost * Math.pow(upgrade.costIncreaseFactor, upgrade.level));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
function updateScoreDisplay() {
    const currentScore = Math.floor(score);
    if (!scoreCountUp) {
        try {
            scoreCountUp = new CountUp(scoreDisplay, currentScore, {
                duration: 0.4,
                formattingFn: formatNumber,
                useEasing: false // –û—Ç–∫–ª—é—á–∞–µ–º easing –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
            });
             if (!scoreCountUp.error) scoreCountUp.start();
             else scoreDisplay.textContent = formatNumber(currentScore);
         } catch(e) { // CountUp –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
             console.error("CountUp Error:", e);
             if(scoreDisplay) scoreDisplay.textContent = formatNumber(currentScore);
         }
    } else {
        scoreCountUp.update(currentScore);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫
function updateStatsDisplays() {
    if (ppcDisplay) ppcDisplay.textContent = formatNumber(pizzasPerClick);
    if (ppsDisplay) ppsDisplay.textContent = formatNumber(pizzasPerSecond);

    upgrades.forEach(upgrade => {
        const button = document.getElementById(`buy-${upgrade.id}`);
        if (button) {
            const currentCost = calculateCost(upgrade);
            const isMaxLevel = upgrade.maxLevel && upgrade.level >= upgrade.maxLevel;
            button.disabled = score < currentCost || isMaxLevel;
            const costSpan = button.querySelector('.upgrade-cost');
            if (costSpan) {
                 if (isMaxLevel) {
                    costSpan.textContent = "–ú–ê–ö–°.";
                 } else {
                    costSpan.textContent = `üçï ${formatNumber(currentCost)}`;
                 }
            }
        }
    });
    updateAchievementCounter();
}

// –ü–µ—Ä–µ—Å—á–µ—Ç PPC –∏ PPS
function recalculateStats() {
    let basePPC = 1;
    let basePPS = 0;
    let clickMultiplier = 1;
    const synergyMultipliers = {};

    upgrades.filter(u => u.type === 'synergy' && u.level > 0).forEach(syn => {
        if (!synergyMultipliers[syn.targetUpgradeId]) synergyMultipliers[syn.targetUpgradeId] = 1;
        synergyMultipliers[syn.targetUpgradeId] *= Math.pow(syn.multiplier, syn.level);
    });

    upgrades.forEach(upgrade => {
        if (upgrade.level > 0) {
            const synergyBoost = synergyMultipliers[upgrade.id] || 1;
            const effectiveValue = upgrade.baseValue * synergyBoost;
            if (upgrade.type === 'click') basePPC += effectiveValue * upgrade.level;
            else if (upgrade.type === 'auto') basePPS += effectiveValue * upgrade.level;
            else if (upgrade.type === 'click_multiplier') clickMultiplier *= Math.pow(upgrade.baseValue, upgrade.level);
        }
    });

    pizzasPerClick = Math.floor(basePPC * clickMultiplier);
    pizzasPerSecond = basePPS; // –û—Å—Ç–∞–≤–∏–º –¥—Ä–æ–±–Ω—ã–º –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ autoClick

    updateStatsDisplays();
    checkAchievements();
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
function createUpgradeElement(upgrade) {
    const item = document.createElement('div');
    item.className = 'upgrade-item';
    item.id = `upgrade-${upgrade.id}`;
    item.title = `${upgrade.tooltip || upgrade.description}\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${upgrade.level}`;

    const cost = calculateCost(upgrade);
    const isMaxLevel = upgrade.maxLevel && upgrade.level >= upgrade.maxLevel;
    let effectText = '';

    if (upgrade.level > 0) {
        const synergyBoost = (upgrades.find(u => u.type === 'synergy' && u.targetUpgradeId === upgrade.id)?.level > 0) ?
                             (Math.pow(upgrades.find(u => u.type === 'synergy' && u.targetUpgradeId === upgrade.id).multiplier, upgrades.find(u => u.type === 'synergy' && u.targetUpgradeId === upgrade.id).level)) : 1;
        let currentEffectValue;
        if (upgrade.type === 'click') { currentEffectValue = upgrade.baseValue * upgrade.level * synergyBoost; effectText = `+${formatNumber(currentEffectValue)} PPC`; }
        else if (upgrade.type === 'auto') { currentEffectValue = upgrade.baseValue * upgrade.level * synergyBoost; effectText = `+${formatNumber(currentEffectValue)} PPS`; }
        else if (upgrade.type === 'click_multiplier') { currentEffectValue = Math.pow(upgrade.baseValue, upgrade.level); effectText = `–ö–ª–∏–∫–∏ x${formatNumber(currentEffectValue)}`; }
        else if (upgrade.type === 'synergy') { const targetName = upgrades.find(u => u.id === upgrade.targetUpgradeId)?.name || '?'; currentEffectValue = Math.pow(upgrade.multiplier, upgrade.level); effectText = `${targetName} x${formatNumber(currentEffectValue)}`; }
        if(effectText) item.title += `\n–¢–µ–∫—É—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: ${effectText}`;
    }

    item.innerHTML = `
        <div class="upgrade-icon">${upgrade.icon}</div>
        <div class="upgrade-details">
            <div class="upgrade-name">${upgrade.name} ${upgrade.maxLevel ? `(${upgrade.level}/${upgrade.maxLevel})` : `(–£—Ä. ${upgrade.level})`}</div>
            <div class="upgrade-description">${upgrade.description}</div>
            ${effectText ? `<div class="upgrade-effect">${effectText}</div>` : ''}
        </div>
        <button class="upgrade-buy-button" id="buy-${upgrade.id}" ${ (score < cost || isMaxLevel) ? 'disabled' : ''}>
            –ö—É–ø–∏—Ç—å
            <span class="upgrade-cost">${isMaxLevel ? '–ú–ê–ö–°.' : `üçï ${formatNumber(cost)}`}</span>
        </button>
    `;

    const buyButton = item.querySelector(`#buy-${upgrade.id}`);
    if(buyButton) buyButton.addEventListener('click', () => buyUpgrade(upgrade.id));

    return item;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    if (!upgradesList) return;
    upgradesList.innerHTML = '';
    upgrades.forEach(upgrade => {
        try { // –î–æ–±–∞–≤–∏–º try-catch –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≤ –æ–¥–Ω–æ–º —É–ª—É—á—à–µ–Ω–∏–∏
            const element = createUpgradeElement(upgrade);
            upgradesList.appendChild(element);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —É–ª—É—á—à–µ–Ω–∏—è ${upgrade.id}:`, error);
        }
    });
    recalculateStats();
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(id) {
    const upgrade = upgrades.find(u => u.id === id);
    if (!upgrade || (upgrade.maxLevel && upgrade.level >= upgrade.maxLevel)) return;

    const cost = calculateCost(upgrade);
    const buyButton = document.getElementById(`buy-${upgrade.id}`);

    if (score >= cost) {
        score -= cost;
        upgrade.level++;

        playSound('buy');
        triggerHapticFeedback('medium');

        const iconElement = document.querySelector(`#upgrade-${id} .upgrade-icon`);
        if (iconElement) {
             iconElement.classList.add('purchased');
             setTimeout(() => iconElement.classList.remove('purchased'), 400);
        }

        const oldElement = document.getElementById(`upgrade-${upgrade.id}`);
        if (oldElement) {
            try {
                const newElement = createUpgradeElement(upgrade);
                oldElement.replaceWith(newElement);
            } catch (error) {
                 console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è ${id}:`, error);
                 renderUpgrades(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            }
        } else {
             renderUpgrades();
        }

        recalculateStats();
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    } else {
       if (buyButton) { // –ê–Ω–∏–º–∞—Ü–∏—è "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç"
            buyButton.style.animation = 'shake 0.4s ease-in-out';
            setTimeout(() => { if(buyButton) buyButton.style.animation = ''; }, 400);
       }
    }
}

// –ö–ª–∏–∫ –ø–æ –ø–∏—Ü—Ü–µ
function handlePizzaClick() {
    playSound('click');
    triggerHapticFeedback('light');

    const earnedPizzas = pizzasPerClick;
    score += earnedPizzas;
    totalPizzasEarned += earnedPizzas;
    totalClicks++;

    createPizzaParticle(pizzaButton);

    if (pizzaButton) {
        pizzaButton.classList.add('clicked');
        setTimeout(() => pizzaButton?.classList.remove('clicked'), 200);
    }

    updateScoreDisplay();
    updateStatsDisplays(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
    checkAchievements();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–∏—Ü—Ü—ã
function createPizzaParticle(targetElement) {
    if (!targetElement || !pizzaContainer) return;
    const particleCount = Math.min(5, Math.max(1, Math.floor(Math.log10(pizzasPerClick + 1))));
    const rect = targetElement.getBoundingClientRect();
    const containerRect = pizzaContainer.getBoundingClientRect();
    const startX = (rect.left + rect.width / 2) - containerRect.left;
    const startY = (rect.top + rect.height / 2) - containerRect.top;

    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'pizza-particle';
        particle.textContent = 'üçï';
        particle.style.left = `${startX}px`;
        particle.style.top = `${startY}px`;
        const angle = Math.random() * Math.PI * 2;
        const distance = 40 + Math.random() * 40;
        const endX = Math.cos(angle) * distance;
        const endY = Math.sin(angle) * distance - 40;
        particle.style.setProperty('--tx', `${endX}px`);
        particle.style.setProperty('--ty', `${endY}px`);
        pizzaContainer.appendChild(particle);
        setTimeout(() => particle.remove(), 700);
    }
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫
function autoClick() {
    if (pizzasPerSecond > 0) {
        const earnedPizzas = pizzasPerSecond / 10; // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        score += earnedPizzas;
        totalPizzasEarned += earnedPizzas;
        updateScoreDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        // updateStatsDisplays(); // –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–∞–∂–¥—É—é 1/10 —Å–µ–∫—É–Ω–¥—ã
        checkAchievements(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    }
}

// --- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ---
function checkAchievements() {
    let changed = false;
    achievements.forEach(ach => {
        if (!ach.unlocked && ach.condition()) {
            ach.unlocked = true;
            showAchievementToast(ach);
            changed = true; // –§–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        }
    });
    if (changed) {
        renderAchievements();
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É
    }
}

function renderAchievements() {
    if (!achievementsList) return;
    achievementsList.innerHTML = '';
    achievements.forEach(ach => {
        const item = document.createElement('div');
        item.className = `achievement-item ${ach.unlocked ? 'unlocked' : ''}`;
        item.title = `${ach.name}\n${ach.description}${ach.unlocked ? ' (–ü–æ–ª—É—á–µ–Ω–æ!)' : ''}`;
        item.innerHTML = `<span class="achievement-icon">${ach.icon}</span>`;
        achievementsList.appendChild(item);
    });
    updateAchievementCounter();
}

function updateAchievementCounter() {
    if (!achievementCountDisplay) return;
    const unlockedCount = achievements.filter(a => a.unlocked).length;
    achievementCountDisplay.textContent = `(${unlockedCount}/${achievements.length})`;
}

function showAchievementToast(achievement) {
    if (!achievementToast || !toastMessage) return;
    toastMessage.textContent = `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}!`;
    achievementToast.classList.add('show');
    playSound('achievement');
    triggerHapticFeedback('success'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º success —Ñ–∏–¥–±–µ–∫, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω

    setTimeout(() => {
        achievementToast?.classList.remove('show');
    }, 3500);
}

// --- –ó–æ–ª–æ—Ç–∞—è –ü–∏—Ü—Ü–∞ ---
function scheduleGoldenPizza() {
    clearTimeout(goldenPizzaTimeout);
    const delay = GOLDEN_PIZZA_MIN_INTERVAL + Math.random() * GOLDEN_PIZZA_RANDOM_INTERVAL;
    goldenPizzaTimeout = setTimeout(spawnGoldenPizza, delay);
}

function spawnGoldenPizza() {
    if (document.querySelector('.golden-pizza') || !interactiveArea) {
        scheduleGoldenPizza(); return;
    }
    const goldenPizza = document.createElement('div');
    goldenPizza.className = 'golden-pizza';
    goldenPizza.textContent = 'üåü';
    const areaRect = interactiveArea.getBoundingClientRect();
    const pizzaSize = 35;
    const randomX = Math.random() * (areaRect.width - pizzaSize);
    const randomY = Math.random() * (areaRect.height - pizzaSize);
    goldenPizza.style.left = `${randomX}px`;
    goldenPizza.style.top = `${randomY}px`;
    goldenPizza.addEventListener('click', handleGoldenPizzaClick);
    interactiveArea.appendChild(goldenPizza);

    setTimeout(() => {
        goldenPizza?.remove();
        scheduleGoldenPizza();
    }, GOLDEN_PIZZA_DURATION);
}

function handleGoldenPizzaClick(event) {
    playSound('goldenPizza');
    triggerHapticFeedback('heavy');
    const goldenPizzaElement = event.target;
    const x = goldenPizzaElement.offsetLeft;
    const y = goldenPizzaElement.offsetTop;
    goldenPizzaElement.remove();

    const bonus = (pizzasPerSecond * 30) + (pizzasPerClick * 10) + 50;
    score += bonus;
    totalPizzasEarned += bonus;
    createBonusFeedback(x, y, bonus);
    updateScoreDisplay();
    updateStatsDisplays();
    checkAchievements();
    clearTimeout(goldenPizzaTimeout);
    scheduleGoldenPizza();
}

function createBonusFeedback(x, y, amount) {
    if (!interactiveArea) return;
    const feedback = document.createElement('div');
    feedback.className = 'click-feedback'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å click-feedback
    feedback.textContent = `+${formatNumber(amount)} üçï!`;
    feedback.style.color = 'var(--color-golden-pizza)';
    feedback.style.fontSize = '1.5em'; // –ù–µ–º–Ω–æ–≥–æ –∫—Ä—É–ø–Ω–µ–µ
    feedback.style.left = `${x}px`;
    feedback.style.top = `${y}px`;
    feedback.style.textShadow = '0 0 4px black';
    feedback.style.position = 'absolute'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ
    feedback.style.pointerEvents = 'none';
    feedback.style.animation = 'float-up 1.5s ease-out forwards'; // –î–æ–ª—å—à–µ –≤–∏—Å–∏—Ç
    interactiveArea.appendChild(feedback);
    setTimeout(() => feedback.remove(), 1500);
}
// –î–æ–±–∞–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é float-up, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
try {
    const styleSheet = document.styleSheets[0];
    if (![...styleSheet.cssRules].some(rule => rule.name === 'float-up')) {
        styleSheet.insertRule(`
        @keyframes float-up {
            0% { opacity: 1; transform: translate(-50%, 0) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -60px) scale(0.8); }
        }`, styleSheet.cssRules.length);
    }
} catch (e) { console.error("Failed to insert CSS rule:", e)}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞ / –°–±—Ä–æ—Å ---
function saveGame() {
    const gameState = {
        score: score,
        totalPizzasEarned: totalPizzasEarned,
        totalClicks: totalClicks,
        upgradeLevels: upgrades.map(u => ({ id: u.id, level: u.level })),
        achievementsUnlocked: achievements.filter(a => a.unlocked).map(a => a.id)
    };
    const stateString = JSON.stringify(gameState);

    if (tg?.CloudStorage?.setItem) {
        tg.CloudStorage.setItem(CLOUD_STORAGE_KEY, stateString, (error, stored) => {
            if (error) console.error('CloudStorage setItem Error:', error);
            // else if (stored) console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ CloudStorage.");
            // else console.log("CloudStorage: –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        });
    } else {
        try {
            localStorage.setItem(LOCAL_STORAGE_FALLBACK_KEY, stateString);
            // console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (Fallback).");
        } catch (e) { console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", e); }
    }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
function loadGame(callback) {
    if (tg?.CloudStorage?.getItem) {
        tg.CloudStorage.getItem(CLOUD_STORAGE_KEY, (error, value) => {
            if (error) {
                console.error('CloudStorage getItem Error:', error);
                loadFromLocalStorage(callback); // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
            } else if (value) {
                console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Telegram CloudStorage...");
                parseAndLoadState(value, callback);
            } else {
                console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CloudStorage –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                loadFromLocalStorage(callback); // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑ localStorage, –µ—Å–ª–∏ –≤ –æ–±–ª–∞–∫–µ –ø—É—Å—Ç–æ
            }
        });
    } else {
        loadFromLocalStorage(callback); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage, –µ—Å–ª–∏ –Ω–µ—Ç CloudStorage
    }
}

function loadFromLocalStorage(callback) {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ LocalStorage (Fallback)...");
    try {
        const savedState = localStorage.getItem(LOCAL_STORAGE_FALLBACK_KEY);
        if (savedState) {
             parseAndLoadState(savedState, callback);
        } else {
             console.log("–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.");
             resetGameLogic();
             callback(); // –í–∞–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å callback –¥–∞–∂–µ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        }
     } catch (e) {
          console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:", e);
          resetGameLogic();
          callback(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
     }
}

function parseAndLoadState(jsonState, callback) {
    try {
        const gameState = JSON.parse(jsonState);
        score = gameState.score || 0;
        totalPizzasEarned = gameState.totalPizzasEarned || 0;
        totalClicks = gameState.totalClicks || 0;

        if (gameState.upgradeLevels) {
            upgrades.forEach(gameUpgrade => {
                const saved = gameState.upgradeLevels.find(s => s.id === gameUpgrade.id);
                gameUpgrade.level = saved ? (saved.level || 0) : 0;
            });
        } else { // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ upgradeLevels
            upgrades.forEach(u => u.level = 0);
        }

        if (gameState.achievementsUnlocked) {
             achievements.forEach(ach => {
                ach.unlocked = gameState.achievementsUnlocked.includes(ach.id);
             });
        } else {
             achievements.forEach(a => a.unlocked = false);
        }
        console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.");
        resetGameLogic(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    } finally {
        callback(); // –í—ã–∑—ã–≤–∞–µ–º callback –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    }
}

// –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞
function resetGameLogic() {
    score = 0;
    totalPizzasEarned = 0;
    totalClicks = 0;
    upgrades.forEach(u => u.level = 0);
    achievements.forEach(a => a.unlocked = false);
    clearTimeout(goldenPizzaTimeout);
    document.querySelector('.golden-pizza')?.remove();
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    clearInterval(autoClickIntervalId);
    clearInterval(saveGameIntervalId);
}

// –°–±—Ä–æ—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
function resetGameConfirm() {
    triggerHapticFeedback('warning'); // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —Ñ–∏–¥–±–µ–∫
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")) {
        triggerHapticFeedback('heavy');
        resetGameLogic();

        // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if (tg?.CloudStorage?.removeItem) {
            tg.CloudStorage.removeItem(CLOUD_STORAGE_KEY, (err, removed) => {
                 if (err) console.error("CloudStorage removeItem error:", err);
                 else console.log("CloudStorage –æ—á–∏—â–µ–Ω–æ.");
            });
        }
        try { localStorage.removeItem(LOCAL_STORAGE_FALLBACK_KEY); } catch(e){}
        console.log("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.");

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã
        renderUpgrades();
        renderAchievements();
        updateScoreDisplay();
        updateStatsDisplays(); // –í–∞–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        scheduleGoldenPizza(); // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –¥–ª—è –∑–æ–ª–æ—Ç–æ–π –ø–∏—Ü—Ü—ã
        startGameLoops(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
function startGameLoops() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    clearInterval(autoClickIntervalId);
    clearInterval(saveGameIntervalId);

    autoClickIntervalId = setInterval(autoClick, 100);
    saveGameIntervalId = setInterval(saveGame, 15000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã ---
function initGame() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...");
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¢–ì (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    setupTelegramIntegration();

    // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    if (pizzaButton) pizzaButton.addEventListener('click', handlePizzaClick);
    else console.error("–ö–Ω–æ–ø–∫–∞ –ø–∏—Ü—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");

    if (resetButton) resetButton.addEventListener('click', resetGameConfirm);
    else console.error("–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ç–∞–ø–µ/–∫–ª–∏–∫–µ
     document.body.addEventListener('pointerdown', () => {
         if (!audioContextStarted) playSound('click'); // –ü—Ä–æ–±–Ω—ã–π –∑–≤—É–∫
     }, { once: true });


    // 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadGame(() => {
        // –≠–¢–û–¢ –ö–û–î –í–´–ü–û–õ–ù–ò–¢–°–Ø –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
        console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");
        // 4. –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–Ω—É—Ç—Ä–∏ callback)
        renderUpgrades();
        renderAchievements();
        updateScoreDisplay(); // –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç–∞ (CountUp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å)
        updateStatsDisplays(); // –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫

        // 5. –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤ –∏ –∑–æ–ª–æ—Ç–æ–π –ø–∏—Ü—Ü—ã (–ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏)
        startGameLoops();
        scheduleGoldenPizza();

        console.log("–ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.");
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initGame);
