document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready(); // –°–æ–æ–±—â–∞–µ–º –¢–ì, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    tg.expand(); // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã UI ---
    const balanceElement = document.getElementById('player-balance');
    const totalHashrateElement = document.getElementById('total-hashrate');
    const totalPowerElement = document.getElementById('total-power');
    const userNameElement = document.getElementById('user-name');
    const mainHashrateElement = document.getElementById('main-hashrate');
    const mainPowerElement = document.getElementById('main-power');
    const collectButton = document.getElementById('collect-button');
    const collectAmountElement = document.getElementById('collect-amount');

    const screens = document.querySelectorAll('.screen');
    const navButtons = document.querySelectorAll('.nav-button');

    const shopItemsContainer = document.getElementById('shop-items');
    const marketItemsBuyContainer = document.getElementById('market-items-buy');
    // ... –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

    const rigSlotsContainer = document.getElementById('rig-slots');

    // --- –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä)
    const componentData = {
        gpus: [
            { id: 'gpu1', name: '–°—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞', price: 100, hashrate: 10, power: 50, type: 'gpu' },
            { id: 'gpu2', name: '–ò–≥—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞', price: 500, hashrate: 60, power: 120, type: 'gpu' },
            { id: 'gpu3', name: '–ü—Ä–æ—Ñ–∏ –ú–∞–π–Ω–µ—Ä', price: 2000, hashrate: 250, power: 200, type: 'gpu' },
        ],
        psus: [
             { id: 'psu1', name: '–°–ª–∞–±—ã–π –ë–ü', price: 50, capacity: 200, type: 'psu' },
             { id: 'psu2', name: '–ù–∞–¥–µ–∂–Ω—ã–π –ë–ü', price: 150, capacity: 600, type: 'psu' },
             { id: 'psu3', name: '–ú–æ—â–Ω—ã–π –ë–ü', price: 400, capacity: 1200, type: 'psu' },
        ],
        // ... motherboards, cooling, etc.
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
    let gameState = {
        balance: 150,
        rig: {
            slots: Array(8).fill(null), // –ü—Ä–∏–º–µ—Ä: 8 —Å–ª–æ—Ç–æ–≤ –≤ —Ñ–µ—Ä–º–µ
            psu: null, // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è
            // motherboard: null, // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–∞—Ç. –ø–ª–∞—Ç–∞ (–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–ª-–≤–æ —Å–ª–æ—Ç–æ–≤)
        },
        inventory: [ // –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –≤ —Ñ–µ—Ä–º–µ
             // { id: 'gpu1', name: '–°—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞', ... }
        ],
        minedAmount: 0, // –ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
        lastUpdate: Date.now(),
        // ... —É–ª—É—á—à–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ...
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ ---

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    function saveGame() {
        localStorage.setItem('cryptoBaronGameState', JSON.stringify(gameState));
         console.log("Game Saved");
    }

    function loadGame() {
        const savedState = localStorage.getItem('cryptoBaronGameState');
        if (savedState) {
            gameState = JSON.parse(savedState);
            // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∑–∞ –≤—Ä–µ–º—è –æ—Ñ—Ñ–ª–∞–π–Ω–∞
            const timeOffline = (Date.now() - (gameState.lastUpdate || Date.now())) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const offlineEarnings = calculateHashrate() * timeOffline / 10; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            gameState.minedAmount = (gameState.minedAmount || 0) + offlineEarnings;
             console.log(`Loaded game. Offline for ${Math.round(timeOffline)}s, earned ${Math.round(offlineEarnings)}`);
        } else {
             // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–µ—Ç
             // –ú–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
             gameState.inventory.push({...componentData.gpus[0]}); // –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        }
        gameState.lastUpdate = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    }

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ö–µ—à—Ä–µ–π—Ç–∞ –∏ –º–æ—â–Ω–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
    function calculateRigStats() {
        let currentHashrate = 0;
        let currentPower = 0;
        gameState.rig.slots.forEach(item => {
            if (item && item.type === 'gpu') {
                currentHashrate += item.hashrate;
                currentPower += item.power;
            }
            // –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        });
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –ë–ü
         if (gameState.rig.psu && currentPower > gameState.rig.psu.capacity) {
             // –®—Ç—Ä–∞—Ñ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç, –µ—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
             // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ, –Ω–æ —Ö–µ—à—Ä–µ–π—Ç –Ω–µ –±—É–¥–µ–º —Ä–µ–∑–∞—Ç—å
              console.warn(`Power limit exceeded! ${currentPower}W / ${gameState.rig.psu.capacity}W`);
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
         }
        return { hashrate: currentHashrate, power: currentPower };
    }
     function calculateHashrate() {
         return calculateRigStats().hashrate;
     }
     function calculatePower() {
          return calculateRigStats().power;
     }


    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    function updateUI() {
        const { hashrate, power } = calculateRigStats();

        balanceElement.textContent = Math.floor(gameState.balance).toLocaleString();
        totalHashrateElement.textContent = hashrate.toLocaleString();
        totalPowerElement.textContent = power.toLocaleString();
        mainHashrateElement.textContent = hashrate.toLocaleString();
        mainPowerElement.textContent = power.toLocaleString();

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–ì (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            userNameElement.textContent = tg.initDataUnsafe.user.first_name || 'User';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–±–æ—Ä–∞
        collectAmountElement.textContent = Math.floor(gameState.minedAmount).toLocaleString();
        collectButton.disabled = gameState.minedAmount < 1;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Ñ–µ—Ä–º—ã
        renderRigSlots();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∂–µ, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω)
        // renderShop();
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        // renderInventory();
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        // renderMarket();
         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
        // renderUpgrades();

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Ç–µ–º—ã –¢–ì (–ø—Ä–∏–º–µ—Ä)
        document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
        document.body.style.color = tg.themeParams.text_color || '#000000';
        // ... –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    }

    // –†–µ–Ω–¥–µ—Ä —Å–ª–æ—Ç–æ–≤ —Ñ–µ—Ä–º—ã
    function renderRigSlots() {
        rigSlotsContainer.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã
        gameState.rig.slots.forEach((item, index) => {
            const slot = document.createElement('div');
            slot.classList.add('slot');
            slot.dataset.index = index;

            if (item) {
                slot.classList.add('filled');
                 // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
                 slot.innerHTML = `
                     <div class="slot-item-name">${item.name}</div>
                     <div class="slot-item-stats">‚ö°Ô∏è ${item.hashrate} H/s</div>
                     <div class="slot-item-stats">üîå ${item.power} W</div>
                     <button class="action-button remove-from-rig-button" data-index="${index}" style="font-size: 0.7rem; padding: 3px 6px; margin-top: 5px; width: auto;">–£–±—Ä–∞—Ç—å</button>
                 `;
            } else {
                slot.textContent = '–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç';
            }
            // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—ã
             slot.addEventListener('click', () => handleSlotClick(index));
            rigSlotsContainer.appendChild(slot);
        });

         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ª–æ—Ç–∞
         document.querySelectorAll('.remove-from-rig-button').forEach(button => {
             button.addEventListener('click', (event) => {
                 event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É
                 const index = parseInt(event.target.dataset.index);
                 removeFromRig(index);
             });
         });
    }


     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É (–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
     function handleSlotClick(index) {
         if (gameState.rig.slots[index]) {
              console.log(`Slot ${index} is already filled with ${gameState.rig.slots[index].name}`);
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é "–ó–∞–º–µ–Ω–∏—Ç—å"
              return;
         }

         // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ/—Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
         showInventoryForInstallation(index);
     }

     // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Å–ª–æ—Ç
     function showInventoryForInstallation(slotIndex) {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å UI –¥–ª—è –≤—ã–±–æ—Ä–∞ GPU –∏–∑ gameState.inventory
          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
         const suitableGPU = gameState.inventory.find(item => item.type === 'gpu');
         if (suitableGPU) {
             console.log(`–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${suitableGPU.name} –≤ —Å–ª–æ—Ç ${slotIndex}`);
             // –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ UI)
              if (confirm(`–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${suitableGPU.name} –≤ —Å–ª–æ—Ç ${slotIndex}?`)) {
                  installToRig(suitableGPU.id, slotIndex); // –ù—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
              }
         } else {
             alert("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
              console.log("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.");
         }
     }


    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Ä–∏–≥
    function installToRig(inventoryItemId, slotIndex) {
        // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
        const itemIndex = gameState.inventory.findIndex(item => item.id === inventoryItemId); // –£–ø—Ä–æ—â–µ–Ω–Ω–æ –∏—â–µ–º –ø–æ id –º–æ–¥–µ–ª–∏
        if (itemIndex === -1) {
            console.error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
            return;
        }
         const itemToInstall = gameState.inventory[itemIndex];

         // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–ª–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã) –∏ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (itemToInstall.type !== 'gpu') { // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ GPU —Å—Ç–∞–≤–∏–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
            alert("–≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—é–¥–∞.");
            return;
        }


        // –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (gameState.rig.slots[slotIndex]) {
             const oldItem = gameState.rig.slots[slotIndex];
             gameState.inventory.push(oldItem);
        }

        // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ —Å–ª–æ—Ç
         gameState.rig.slots[slotIndex] = itemToInstall;
         gameState.inventory.splice(itemIndex, 1); // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

         console.log(`${itemToInstall.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç ${slotIndex}`);
        updateUI();
        saveGame();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Ä–∏–≥–∞
    function removeFromRig(slotIndex) {
         const itemToRemove = gameState.rig.slots[slotIndex];
         if (!itemToRemove) {
              console.error("–°–ª–æ—Ç —É–∂–µ –ø—É—Å—Ç!");
              return;
         }

         // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
         gameState.inventory.push(itemToRemove);
         gameState.rig.slots[slotIndex] = null;

         console.log(`${itemToRemove.name} —É–±—Ä–∞–Ω –∏–∑ —Å–ª–æ—Ç–∞ ${slotIndex} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`);
         updateUI();
         saveGame();
    }


    // –†–µ–Ω–¥–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
    function renderShop() {
        shopItemsContainer.innerHTML = '';
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const allItems = [...componentData.gpus, ...componentData.psus /*, ... –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã */];

        allItems.forEach(item => {
            const card = document.createElement('div');
            card.classList.add('item-card');
            card.innerHTML = `
                <h3>${item.name}</h3>
                ${item.type === 'gpu' ? `<p>‚ö°Ô∏è ${item.hashrate} H/s</p><p>üîå ${item.power} W</p>` : ''}
                 ${item.type === 'psu' ? `<p>üí° ${item.capacity} W</p>` : ''}
                <p class="price">üí∞ ${item.price.toLocaleString()}</p>
                <button class="buy-button" data-item-id="${item.id}" data-item-type="${item.type}">–ö—É–ø–∏—Ç—å</button>
            `;
            shopItemsContainer.appendChild(card);
        });

        // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
        shopItemsContainer.querySelectorAll('.buy-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const itemId = e.target.dataset.itemId;
                const itemType = e.target.dataset.itemType; // 'gpu', 'psu' –∏ —Ç.–¥.
                buyItem(itemId, itemType);
            });
        });
    }

     // –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     function renderInventory() {
         const inventoryContainer = document.getElementById('inventory-items');
         inventoryContainer.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞

         if (gameState.inventory.length === 0) {
             inventoryContainer.innerHTML = '<p>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.</p>';
             return;
         }

         gameState.inventory.forEach((item, index) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º index –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä
             const card = document.createElement('div');
             card.classList.add('item-card');
             card.innerHTML = `
                 <h3>${item.name}</h3>
                 ${item.type === 'gpu' ? `<p>‚ö°Ô∏è ${item.hashrate} H/s</p><p>üîå ${item.power} W</p>` : ''}
                 ${item.type === 'psu' ? `<p>üí° ${item.capacity} W</p>` : ''}
                 <!-- –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ" –∏–ª–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" -->
                 <button class="action-button sell-on-market-prep" data-inventory-index="${index}" style="font-size: 0.8rem; padding: 5px 8px; margin-top: 8px; background-color: #ff9800;">–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫</button>
             `;
             inventoryContainer.appendChild(card);
         });

         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫" (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
     }

     // –†–µ–Ω–¥–µ—Ä —Ä—ã–Ω–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
     function renderMarket() {
         // –°–∏–º—É–ª—è—Ü–∏—è –ª–æ—Ç–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É
         marketItemsBuyContainer.innerHTML = '';
         const marketGpus = componentData.gpus.slice(0, 2).map(gpu => ({
             ...gpu,
             // –°–∏–º—É–ª–∏—Ä—É–µ–º –ë/–£ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ü–µ–Ω—É
             price: Math.floor(gpu.price * (0.6 + Math.random() * 0.3)), // 60-90% –æ—Ç –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
             seller: `Player${Math.floor(Math.random()*1000)}` // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü
         }));
         marketGpus.forEach(item => {
              const card = document.createElement('div');
              card.classList.add('item-card');
              card.innerHTML = `
                 <h3>${item.name} (–ë/–£)</h3>
                 <p>‚ö°Ô∏è ${item.hashrate} H/s</p><p>üîå ${item.power} W</p>
                 <p>–ü—Ä–æ–¥–∞–≤–µ—Ü: ${item.seller}</p>
                 <p class="price">üí∞ ${item.price.toLocaleString()}</p>
                 <button class="buy-button market-buy-button" data-item-id="${item.id}" data-price="${item.price}">–ö—É–ø–∏—Ç—å</button>
              `;
              marketItemsBuyContainer.appendChild(card);
         });
          // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ —Å —Ä—ã–Ω–∫–∞
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–¥–∞—Ç—å" (–ª–∏—Å—Ç–∏–Ω–≥ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
     }

      // –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
      function renderUpgrades() {
          const upgradeList = document.getElementById('upgrade-list');
          upgradeList.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞

          // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö
          const availableUpgrades = [
              { id: 'eff1', name: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ I', description: '-5% –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏', cost: 1000, level: gameState.upgrades?.eff1 || 0 },
              { id: 'hash1', name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ I', description: '+5% —Ö–µ—à—Ä–µ–π—Ç–∞', cost: 1500, level: gameState.upgrades?.hash1 || 0 },
          ];

          availableUpgrades.forEach(upg => {
              const currentLevel = upg.level;
              // –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å—Ç—É—Ç —Å —É—Ä–æ–≤–Ω–µ–º
              const currentCost = upg.cost * Math.pow(2, currentLevel);
              const card = document.createElement('div');
              card.classList.add('upgrade-card');
               card.innerHTML = `
                  <h3>${upg.name} (–£—Ä. ${currentLevel})</h3>
                  <p>${upg.description}</p>
                  <p class="cost">üí∞ ${currentCost.toLocaleString()}</p>
                  <button class="upgrade-button" data-upgrade-id="${upg.id}" ${gameState.balance < currentCost ? 'disabled' : ''}>–£–ª—É—á—à–∏—Ç—å</button>
               `;
               upgradeList.appendChild(card);
          });

            // TODO: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
      }


    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    function buyItem(itemId, itemType) {
        const itemData = componentData[itemType + 's']?.find(i => i.id === itemId); // gpu -> gpus, psu -> psus
        if (!itemData) {
            console.error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞!");
            return;
        }

        if (gameState.balance >= itemData.price) {
            gameState.balance -= itemData.price;
             // –î–æ–±–∞–≤–ª—è–µ–º –ö–û–ü–ò–Æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
             // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –Ω—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
             gameState.inventory.push({ ...itemData });
             console.log(`–ö—É–ø–ª–µ–Ω ${itemData.name}`);
             tg.HapticFeedback.notificationOccurred('success'); // –í–∏–±—Ä–æ–æ—Ç–∫–ª–∏–∫ –¢–ì
            updateUI();
             renderInventory(); // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            saveGame();
        } else {
            console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
             tg.HapticFeedback.notificationOccurred('error');
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BitCoinz!");
        }
    }

    // –°–±–æ—Ä –Ω–∞–º–∞–π–Ω–µ–Ω–Ω–æ–≥–æ
    function collectMined() {
        if (gameState.minedAmount >= 1) {
            const collected = Math.floor(gameState.minedAmount);
            gameState.balance += collected;
            gameState.minedAmount -= collected; // –í—ã—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å
             console.log(`–°–æ–±—Ä–∞–Ω–æ ${collected} BitCoinz`);
             tg.HapticFeedback.impactOccurred('light');
            updateUI();
            saveGame();
        }
    }

    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞)
    function gameLoop() {
        const now = Date.now();
        const deltaTime = (now - gameState.lastUpdate) / 1000; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø—Ä–æ—à–ª–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        const currentHashrate = calculateHashrate();
         // –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 H/s = 0.1 BitCoinz –≤ —Å–µ–∫—É–Ω–¥—É, –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
        const earnings = currentHashrate * deltaTime * 0.1;
        gameState.minedAmount += earnings;

        // TODO: –í—ã—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

        gameState.lastUpdate = now;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è —á–∞—Å—Ç–æ (–∫–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞)
        collectAmountElement.textContent = Math.floor(gameState.minedAmount).toLocaleString();
        collectButton.disabled = gameState.minedAmount < 1;

         // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
         // if (Math.random() < 0.1) saveGame(); // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞–∑ –≤ ~10 —Å–µ–∫—É–Ω–¥ –≤ —Å—Ä–µ–¥–Ω–µ–º
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    function switchScreen(screenId) {
        screens.forEach(screen => screen.classList.remove('active'));
        navButtons.forEach(button => button.classList.remove('active'));

        const targetScreen = document.getElementById(`screen-${screenId}`);
        const targetButton = document.querySelector(`.nav-button[data-screen="${screenId}"]`);

        if (targetScreen) targetScreen.classList.add('active');
        if (targetButton) targetButton.classList.add('active');

         // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
         if (screenId === 'shop') renderShop();
         if (screenId === 'inventory') renderInventory();
         if (screenId === 'market') renderMarket();
         if (screenId === 'upgrades') renderUpgrades();
         if (screenId === 'main') renderRigSlots(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π

         console.log(`Switched to screen: ${screenId}`);
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            switchScreen(button.dataset.screen);
        });
    });

     // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º —Ä—ã–Ω–∫–∞ (—Ç–∞–±—ã)
     document.querySelectorAll('.tab-button').forEach(button => {
         button.addEventListener('click', () => {
             const tabId = button.dataset.marketTab; // 'buy' or 'sell'
             // –£–±–∏—Ä–∞–µ–º active —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤
             document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
             document.querySelectorAll('.market-tab-content').forEach(content => content.classList.remove('active'));
             // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–± –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
             button.classList.add('active');
             document.getElementById(`market-items-${tabId}`).classList.add('active');
         });
     });

    // –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞
    collectButton.addEventListener('click', collectMined);

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    setInterval(gameLoop, 1000);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI
    updateUI();
     switchScreen('main'); // –ù–∞—á–∏–Ω–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞

     // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     setInterval(saveGame, 30000); // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
});
